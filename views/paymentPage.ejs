<!DOCTYPE html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pembayaran Kursus</title>
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <style>
      #card-element {
        background: white;
        min-height: 45px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 5px;
      }
    </style>
  </head>
  <body class="bg-gray-100">
    <div class="container mx-auto px-6 py-10">
      <h1 class="text-2xl font-bold mb-4">
        Pembayaran Kursus: <%= course.name %>
      </h1>
      <p class="mb-4">Harga: $10.00</p>
      <div id="payment-form">
        <div id="card-element" class="mb-4"></div>
        <button
          id="submit"
          class="bg-blue-600 text-white px-4 py-2 rounded mt-4"
        >
          Bayar Sekarang
        </button>
        <p id="payment-message" class="mt-2 text-red-500"></p>
      </div>
    </div>

    <script src="https://js.stripe.com/v3/"></script>
    <script>
      // Inisialisasi Stripe menggunakan public key yang dikirim dari backend
      const stripe = Stripe('<%= STRIPE_PUBLIC_KEY %>');
      console.log("Stripe Key:", "<%= STRIPE_PUBLIC_KEY %>");
      const elements = stripe.elements();
      const cardElement = elements.create('card', {
        style: {
          base: {
            fontSize: '16px',
            color: '#32325d',
            '::placeholder': { color: '#a0aec0' }
          },
          invalid: {
            color: '#fa755a',
            iconColor: '#fa755a'
          }
        }
      });
      cardElement.mount('#card-element');

      // Ambil data pembayaran dari controller
      const paymentData = <%- JSON.stringify(paymentData || {}) %>;
      console.log("paymentData:", paymentData);

      document.getElementById('submit').addEventListener('click', async (e) => {
        e.preventDefault();
        const message = document.getElementById('payment-message');
        const button = document.getElementById('submit');

        button.disabled = true;
        message.textContent = 'Memproses pembayaran...';

        try {
          // Konfirmasi pembayaran dengan Stripe
          const { error, paymentIntent } = await stripe.confirmCardPayment(paymentData.clientSecret, {
            payment_method: {
              card: cardElement,
              billing_details: { name: 'User' } // Ganti dengan nama user sebenarnya jika tersedia
            }
          });

          if (error) {
            message.textContent = error.message;
            button.disabled = false;
            return;
          }

          // Kirim data ke server untuk menyimpan enrollment dan membuat invoice
          const response = await fetch('/complete-enrollment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              courseId: paymentData.courseId,
              userId: paymentData.userId,
              stripePaymentId: paymentIntent.id
            })
          });

          console.log("Invoice Response:", response);
          const result = await response.json();
          if (!response.ok) throw new Error(result.error || 'Gagal menyimpan data pendaftaran');

          // Ubah pesan jika sukses
          message.textContent = 'Pembayaran berhasil! Mengarahkan ke invoice...';
          message.classList.remove('text-red-500');
          message.classList.add('text-green-600');

          // Redirect langsung ke halaman invoice view, yang memiliki navbar di atasnya
          window.location.href = `/invoice-view/${paymentIntent.id}`;

        } catch (err) {
          console.error("Error during payment processing:", err);
          message.textContent = err.message;
          button.disabled = false;
        }
      });
    </script>
  </body>
</html>
